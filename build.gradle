import java.util.zip.ZipEntry
import java.util.zip.ZipFile
import java.util.zip.ZipOutputStream

plugins {
    id 'java'
}

group 'org.example'
version '1.0-SNAPSHOT'
archivesBaseName = 'DualLoaderMod'

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

//Automates building of all loader specific jars (includes common if you have that)
//took reference from: <https://github.com/ReMod-Studios/yarn-and-needles/blob/3277a6a313b1dd7706408cba425d346b47cf3ea8/build.gradle.kts#L5-L10>
subprojects.forEach({project ->
    build.finalizedBy(project.name + ':build')
//    project.dependencies.add("compile", project(":Common"))
})

build.finalizedBy('uniformJar')

//Merging tasking
task uniformJar() {
    doLast {
        String name = "/libs/" + archivesBaseName
        if (version != "null") {
            name += "-" + version;
        }
        ArrayList<String> entries = new ArrayList<>()
        File tempMergingDir = new File(name + "-Uniform.jar-merging")
        print(project.buildDir.path + name + ".jar")
        clone(new File(project.buildDir.path + name + ".jar"), tempMergingDir, entries)
        //more automation of subproject stuff
        subprojects.forEach({project ->
            print("Clone Subproject Jar From: " + project.buildDir.path + "\n")
            clone(new File(project.buildDir.path + name + ".jar"), tempMergingDir, entries)
        })
        File outputFile = new File("build/" + name + "-Uniform.jar")
        outputFile.createNewFile()
        ZipOutputStream output = new ZipOutputStream(new FileOutputStream(outputFile))
        //write all the collected files into a uniform jar
        for (String entry : entries) {
            output.putNextEntry(new ZipEntry(entry))
            InputStream stream = new FileInputStream(tempMergingDir.path + "/" + entry)
            byte[] bytes = new byte[stream.available()]
            stream.read(bytes)
            stream.close()
            output.write(bytes)
            output.closeEntry()
        }
        output.close()
        tempMergingDir.deleteOnExit()
        tempMergingDir.deleteDir()
    }
}

//copies all entries in the zip file it's being used on to the targeted folder
void clone(File srcZip, File targ, ArrayList<String> entries) {
    File file = srcZip
    ZipFile file1 = new ZipFile(file)
    File mergingFile = new File(targ.path)
    mergingFile.mkdirs()
    for (ZipEntry entry : file1.stream().iterator()) {
        ZipEntry entry1 = entry
        if (entry.isDirectory()) continue
        if (!entries.contains(entry1.name)) entries.add(entry1.name)
        InputStream stream = file1.getInputStream(entry1)
        byte[] bytes = new byte[stream.available()]
        stream.read(bytes)
        stream.close()
        File file2 = new File(targ.path + "/" + entry1.name);
        print("|Copy File With Name: " + file2.name + "\n")
        print("|Target: " + file2.path + "\n")
        file2.getParentFile().mkdirs()
        file2.createNewFile()
        FileOutputStream stream1 = new FileOutputStream(file2)
        stream1.write(bytes)
        stream1.close()
        file2.deleteOnExit()
    }
    file1.close()
}